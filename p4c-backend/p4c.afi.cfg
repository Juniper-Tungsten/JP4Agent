#
# Advanced Forwarding Interface : P4 Compiler
#
# Created by Sandesh Kumar Sodhi, December 2017
# Copyright (c) [2017] Juniper Networks, Inc. All rights reserved.
#
# All rights reserved.
#
# Notice and Disclaimer: This code is licensed to you under the Apache
# License 2.0 (the "License"). You may not use this code except in compliance
# with the License. This code is not an official Juniper product. You can
# obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Third-Party Code: This code may depend on other components under separate
# copyright notice and license terms. Your use of the source code for those
# components is subject to the terms and conditions of the respective license
# as noted in the Third-Party source code file.
#

# -*- Python -*-

from p4c_src.driver import BackendDriver

class AFIBackend(BackendDriver):
    def __init__(self, target, argParser):
        BackendDriver.__init__(self, target, argParser)

        # commands
        self.add_command('preprocessor', 'cc')
        self.add_command('compiler',
                         os.path.join(os.environ['P4C_BIN_DIR'],'p4c-afi'))
        # order of invocation
        self.enable_commands(['preprocessor', 'compiler'])

        # options
        self.add_command_option('preprocessor', "-E -x c")

    def process_command_line_options(self, opts):
        BackendDriver.process_command_line_options(self, opts)

        # process the options related to source file
        basepath = "{}/{}".format(opts.output_directory, self._source_basename)
        # preprocessor
        self.add_command_option('preprocessor', "-o")
        self.add_command_option('preprocessor', "{}.p4i".format(basepath))
        self.add_command_option('preprocessor', self._source_filename)

        # compiler
        self.add_command_option('compiler', "-o")
        self.add_command_option('compiler', "{}.json".format(basepath))
        self.add_command_option('compiler', "{}.p4i".format(basepath))

        # generate api as part of the compilation
        self.add_command_option('compiler', "--p4runtime-file");
        self.add_command_option('compiler', "{}.p4rt".format(basepath))

# target
afi_target = AFIBackend('afi-ss-juniper', argParser)
config.target.append(afi_target)
